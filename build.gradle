buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

version = '0.1'
group = 'com.chaosbuffalo.bonetown' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'bonetown'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
}


configurations {
    // configuration that holds jars to embed inside the jar
    embed
    compile.extendsFrom embed
}


minecraft {
    mappings channel: 'official', version: '1.18.2'

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bonetown'

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'bonetown'

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bonetown'

            mods {
                bonetown {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'bonetown', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.25'
    shadow group: 'org.joml', name: 'joml', version: '1.9.22'
    shadow group: 'com.upokecenter', name: 'cbor', version: '4.1.0'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "bonetown",
            "Specification-Vendor": "chaosbuffalo",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"chaosbuffalo",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

shadowJar {
    project.configurations.shadow.setTransitive(true);
    configurations = [project.configurations.shadow]

    classifier '' // Replace the default JAR

    relocate "org.joml", "com.chaosbuffalo.bonetown.repack.org.joml"
    relocate "com.upokecenter", "com.chaosbuffalo.bonetown.repack.com.upokecenter"

}

reobf {
    shadowJar {} // Reobfuscate the shadowed JAR
}


// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact reobfArtifact
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
